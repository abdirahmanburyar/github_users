{"version":3,"sources":["components/UsersList.jsx","components/SearchBox.js","components/users.jsx","App.js","serviceWorker.js","index.js"],"names":["UsersList","_ref","login","avatar_url","repos_url","react_default","a","createElement","react","className","style","width","src","alt","href","SearchBox","onChange","type","name","placeholder","Users","state","users","search","e","_this","setState","target","value","axios","get","userData","data","this","_this$state","searchUser","filter","user","toLowerCase","includes","length","map","id","userMaps","Object","objectWithoutProperties","assign","key","class","role","Component","App","users_Users","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAEe,SAASA,EAATC,GAAmD,IAA/BC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,UAClD,OACQC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOC,MAAO,CAACC,MAAO,UACjCN,EAAAC,EAAAC,cAAA,OAAKK,IAAKT,EAAYM,UAAU,eAAeI,IAAI,QACnDR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAaJ,EAAAC,EAAAC,cAAA,cAASL,IACpCG,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aAAb,mGAEJJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,+BACVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAkBJ,EAAAC,EAAAC,cAAA,KAAGO,KAAMV,GAAT,eAChCC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,2BACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,yBCXT,SAASM,EAATd,GAAiC,IAAZe,EAAYf,EAAZe,SAChC,OACIX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OACRC,KAAK,SACLC,YAAY,oBACZH,SAAUA,EACVP,UAAU,weCJDW,oMAChBC,MAAQ,CACLC,MAAO,GACPC,OAAQ,MAQZP,SAAW,SAAAQ,GACPC,EAAKC,SAAS,CACVH,OAAQC,EAAEG,OAAOC,2MANEC,IAAMC,IAAI,uCAA3BC,SACAT,EAAQS,EAASC,KACvBC,KAAKP,SAAS,CAAEJ,6IAOZ,IAAAY,EACsBD,KAAKZ,MAAvBC,EADJY,EACIZ,MAAOC,EADXW,EACWX,OACTY,EAAab,EAAMc,OAAO,SAAAC,GAAI,OAAIA,EAAKnC,MAAMoC,cAAcC,SAAShB,EAAOe,iBACjF,OACIjC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,gBACAJ,EAAAC,EAAAC,cAACQ,EAAD,CAAWC,SAAUiB,KAAKjB,WAC1BX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACNa,EAGDa,GAAcA,EAAWK,OAAS,EACrCnC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAac,EAAOe,cAAlC,aACIH,EAAWM,IAAI,SAAAxC,GAAA,IAAEyC,EAAFzC,EAAEyC,GAAOC,EAATC,OAAAC,EAAA,EAAAD,CAAA3C,EAAA,eAAuBI,EAAAC,EAAAC,cAACP,EAAD4C,OAAAE,OAAA,CAAWC,IAAKL,GAASC,MALtDtC,EAAAC,EAAAC,cAAA,OAAKyC,MAAM,iBAAiBC,KAAK,UAC3C5C,EAAAC,EAAAC,cAAA,QAAMyC,MAAM,WAAZ,wBAzBWE,mBCOpBC,MARf,WACE,OACE9C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAC6C,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPtD,EAAAC,EAAAC,cAACF,EAAAC,EAAMsD,WAAP,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.43ea0e8a.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport './usersLists.css'\r\nexport default function UsersList({login, avatar_url, repos_url}) {\r\n    return (\r\n            <Fragment>\r\n                <div className=\"card\" style={{width: '280px'}}>\r\n                    <img src={avatar_url} className=\"card-img-top\" alt=\"...\" />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\"><strong>{login}</strong></h5>\r\n                        <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n                    </div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\"><a href={repos_url}>Repository</a></li>\r\n                        <li className=\"list-group-item\">Dapibus ac facilisis in</li>\r\n                        <li className=\"list-group-item\">Vestibulum at eros</li>\r\n                    </ul>\r\n                </div>\r\n            </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './usersLists.css'\r\n\r\nexport default function SearchBox({ onChange }) {\r\n    return (\r\n        <input type=\"text\"\r\n            name=\"search\"\r\n            placeholder=\"Search By Name...\" \r\n            onChange={onChange}\r\n            className=\"seachInput\"\r\n         />\r\n    )\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport UsersList from './UsersList'\r\nimport SearchBox from './SearchBox'\r\nimport './usersLists.css'\r\nimport axios from 'axios'\r\nexport default class Users extends Component {\r\n     state = {\r\n        users: [],\r\n        search: ''\r\n    }\r\n        \r\n    async componentDidMount(){\r\n        const userData = await axios.get('https://api.github.com/users');\r\n        const users = userData.data\r\n        this.setState({ users })\r\n    }\r\n    onChange = e => {\r\n        this.setState({\r\n            search: e.target.value\r\n        })\r\n    }  \r\n    render(){\r\n        const { users, search } = this.state\r\n        const searchUser = users.filter(user => user.login.toLowerCase().includes(search.toLowerCase()))\r\n        return (\r\n            <Fragment>\r\n                <h1 className=\"head\">Github Users</h1>\r\n                <SearchBox onChange={this.onChange} />\r\n                <div className=\"users\">\r\n                    {   !users ? (<div class=\"spinner-border\" role=\"status\">\r\n                        <span class=\"sr-only\">Loading...</span>\r\n                      </div>) :\r\n                        searchUser && searchUser.length < 0 ? \r\n                    (<h1 className=\"not_found\">{search.toLowerCase()} no Found</h1>) :\r\n                         searchUser.map(({id, ...userMaps}) => <UsersList key={id} { ...userMaps } /> )\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n    )\r\n}\r\n}","import React from 'react';\nimport Users from './components/users'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Users />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}